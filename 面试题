1.基本类型和String StringBuffer StringBuilder
2.集合这部分了解多少
3.你理解的io是什么
4.什么是nio
5.java的远程调用（rmi，webservice）
6.网络编程
7.java反射
8.java的安全框架
9.缓存机制(memcache/redis)
10.服务器集群
11.数据库的分区分表
12.代理，负载均衡(nignx)
13.消息中间件(activeMQ)
14.时间调度(quartz)
15.UML
16.设计模式

1.spring
2.springMVC
3.mybatis/hibernate
4.存储(七牛)
5.支付(微信、支付宝、银联)

1.项目管理工具Maven
2.版本管理工具svn
3.服务器tomcat
4.数据库Mysql
5.日志管理log4j
6.开发工具eclipse
7.快速原型Axure
8.UI+UE设计photoshop
9.测试工具junit

1.html5+css（框架）Bootstrap
2.JavaScript（框架）jQuery

1.微信开发（PHP）
2.Android
3.iOS
4.Hadoop
5.网络安全
6.[Druid（数据源配置 sql防注入 sql性能监控)](http://wosyingjun.iteye.com/blog/2306139)
- **Dubbo+Zookeeper分布式服务框架**
- **合理的分布式服务划分（common+api+service+web）**
- **资源调度和治理中心(SOA)（dubbo-admin）**
- **服务监控方案(dubbo-monitor)**
- **分布式系统中的异常处理**
- **分布式事务（待完善）**
- **分布式锁（待完善）**
- **dubbo服务集群、负载均衡策略（待完善）**
- **Redis集群高可用方案（待完善）**
- **Zookeeper集群高可用方案（待完善）**
- **消息中间件 ActiveMQ 的引入（待完善）**
- **ActiveMQ 集群高可用方案（待完善）**
- **分布式文件系统（FastDFS）的引入（待完善）**
- **FastDFS集群高可用方案（待完善）**
7.了解JVM
	java源码编译机制
	类加载机制(CLassLoader及其子类)
		1）Bootstrap ClassLoader
		负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类
		2）Extension ClassLoader
		负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar或-Djava.ext.dirs指定目录下的jar包
		3）App ClassLoader
		负责记载classpath中指定的jar包及目录中class
		4）Custom ClassLoader
		 属于应用程序根据自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现ClassLoader加载过程中会先检查类是否被已加载，检查顺序是自底向上，从Custom ClassLoader到BootStrap ClassLoader逐层检查，只要某个classloader已加载就视为已加载此类，保证此类只所有ClassLoader加载一次。而加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。
	类执行机制
	2）JVM的内存管理
		内存组成结构：堆、栈、本地方法栈、方法区
		1）堆
		所有通过new创建的对象的内存都在堆中分配，堆的大小可以通过-Xmx和-Xms来控制。堆被划分为新生代和旧生代，新生代又被进一步划分为Eden和Survivor区，最后Survivor由From Space和To Space组成
		-Xmx:最大堆内存,如：-Xmx512m
		-Xms:初始时堆内存,如：-Xms256m
		-XX:MaxNewSize:最大年轻区内存
		-XX:NewSize:初始时年轻区内存.通常为 Xmx 的 1/3 或 1/4。新生代 = Eden + 2 个 Survivor 空间。实际可用空间为 = Eden + 1 个 Survivor，即 90%
		-XX:MaxPermSize:最大持久带内存
		-XX:PermSize:初始时持久带内存
		-XX:+PrintGCDetails。打印 GC 信息
		 -XX:NewRatio 新生代与老年代的比例，如 –XX:NewRatio=2，则新生代占整个堆空间的1/3，老年代占2/3
		 -XX:SurvivorRatio 新生代中 Eden 与 Survivor 的比值。默认值为 8。即 Eden 占新生代空间的 8/10，另外两个 Survivor 各占 1/10
		 2）栈
		  每个线程执行每个方法的时候都会在栈中申请一个栈帧，每个栈帧包括局部变量区和操作数栈，用于存放此次方法调用过程中的临时变量、参数和中间结果。
   		 -xss:设置每个线程的堆栈大小. JDK1.5+ 每个线程堆栈大小为 1M，一般来说如果栈不是很深的话， 1M 是绝对够用了的
		 3）本地方法栈
		 用于支持native方法的执行，存储了每个native方法调用的状态
		 4）方法区
		 存放了要加载的类信息、静态变量、final类型的常量、属性和方法信息。JVM用持久代（Permanet Generation）来存放方法区，可通过-XX:PermSize和-XX:MaxPermSize来指定最小值和最大值
	3）垃圾回收
		引用计数（无法处理循环引用）
		标记-清除（内存碎片）
		复制（两倍内存空间）
		标记-整理
	4）JVM内存调优
		对JVM内存的系统级的调优主要的目的是减少GC的频率和Full GC的次数，过多的GC和Full GC是会占用很多的系统资源（主要是CPU），影响系统的吞吐量。
		导致FUll GC的几种情况：
			旧生代空间不足
			Pemanet Generation空间不足
			System.gc()被显示调用
		GC策略的设置方式
			吞吐量优先
			暂停时间优先
	5）最后汇总一下JVM常见配置
		堆设置
		-Xms:初始堆大小
		-Xmx:最大堆大小
		-Xmn:新生代的大小（整个堆内存的1/3到1/4）
		-XX:SurvivorRatio=n:新生代中Eden空间和from/to空间的比例关系
		-XX:NewSize=n:设置年轻代大小
		-XX:NewRatio=n:设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4
		方法区配置
		jdk1.8之前(-XX:MaxPermSize=n:设置持久代大小,-XX:PermSize=n)
		jdk1.8(-XX:MaxMetaspaceSize=n:永久区的最大可用值)
		栈配置
		-Xss
		直接内存配置
		-XX:MaxDirectMemorySize:最大可用直接内存
		虚拟机工作模式
		-version
		-server/-client
		堆溢出处理
		-XX:+HeapDumpOnOutOfMemoryError
		-XX:HeapDumpPath=d:/a.dump(MAT)
		-XX:OnOutOfMemoryError=printstack.bat %p
		(printstack.bat:D:/tools/jdk1.7_40/bin/jstack -F %1 > D:/a.txt)
		收集器设置
		-XX:+UseSerialGC:设置串行收集器
		-XX:+UseParallelGC:设置并行收集器
		-XX:+UseParalledlOldGC:设置并行年老代收集器
		-XX:+UseConcMarkSweepGC:设置并发收集器
		垃圾回收统计信息
		-XX:+PrintGC
		-XX:+PrintGCDetails
		-XX:+PrintHeapAtGC
		-XX:+PrintGCTimeStamps
		-XX:+PrintGCApplicationConcurrentTime
		-XX:+PrintGCApplicationStoppedTime
		-XX:+PrintReferenceGC
		-Xloggc:filename
		类加载/卸载的跟踪
		-verbose:class
		-XX:+TraceClassLoading
		-XX:+TraceClassUnloading
		-XX:+PrintClassHistogram(Ctrl+Break控制台)
		系统参数查看
		-XX:+PrintVMOptions
		-XX:+PrintCommandLineFlags
		-XX:+PrintFlagsFinal
		并行收集器设置
		-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。
		-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间
		-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)
		并发收集器设置
		-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。
		-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。	
		
常见的内存溢出有以下两种:
java.lang.OutOfMemoryError: PermGen space
java.lang.OutOfMemoryError: Java heap space
https://zhidao.baidu.com/question/394406824408234045.html